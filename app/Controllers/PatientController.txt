<?php

namespace App\Controllers;

use App\Models\PatientModel;

class PatientController extends BaseController
{
    protected $patientModel;

    public function __construct()
    {
        $this->patientModel = new PatientModel();
    }

    public function index()
    {
        $data['patients'] = $this->patientModel->findAll();
        return view('patients/index', $data);
    }

    public function create()
    {
        return view('patients/create');
    }

    public function edit($id)
    {
        $patient = $this->patientModel->find($id);

        if (!$patient) {
            return redirect()->to(base_url('patients'))->with('error', 'Paciente no encontrado.');
        }

        $data = [
            'patient' => $patient
        ];

        return view('patients/edit', $data);
    }

    public function update($id)
    {
        $patient = $this->patientModel->find($id);

        if (!$patient) {
            return redirect()->to(base_url('patients'))->with('error', 'Paciente no encontrado.');
        }

        $data = $this->request->getPost();
        $data['is_active'] = $this->request->getPost('is_active') ? 1 : 0;

        // Convertir el array de síntomas a una cadena separada por comas si es necesario
        if (isset($data['symptoms'])) {
            if (is_array($data['symptoms'])) {
                $data['symptoms'] = implode(',', $data['symptoms']); // Sin espacios después de las comas
            } elseif (strpos($data['symptoms'], ', ') !== false) {
                $data['symptoms'] = str_replace(', ', ',', $data['symptoms']); // Reemplazar ", " por ","
            }
        } else {
            $data['symptoms'] = '';
        }

        // Validar el código, excluyendo el paciente actual
        if (!$this->patientModel->validateCode($data['code'], $id)) {
            return redirect()->back()->with('error', 'El código ya está registrado por otro paciente.');
        }


        if ($this->patientModel->update($id, $data)) {
            return redirect()->to(base_url('patients/chatbot/' . $id))
                ->with('success', 'Paciente actualizado correctamente.');
        } else {
            return redirect()->back()->with('error', 'Error al actualizar el paciente.');
        }
    }

    public function store()
    {
        $data = $this->request->getPost();
        $data['is_active'] = $this->request->getPost('is_active') ? 1 : 0;

        // Convertir el array de síntomas a una cadena separada por comas si es necesario
        if (isset($data['symptoms'])) {
            if (is_array($data['symptoms'])) {
                $data['symptoms'] = implode(',', $data['symptoms']); // Sin espacios después de las comas
            } elseif (strpos($data['symptoms'], ', ') !== false) {
                $data['symptoms'] = str_replace(', ', ',', $data['symptoms']); // Reemplazar ", " por ","
            }
        } else {
            $data['symptoms'] = '';
        }

        if ($this->patientModel->validateCode($data['code'])) {
            if ($this->patientModel->save($data)) {
                $patientId = $this->patientModel->insertID();
                return redirect()->to(base_url('patients/chatbot/' . $patientId))
                    ->with('success', 'Paciente registrado correctamente.')
                    ->with('patientId', $patientId);
            } else {
                return redirect()->back()->with('error', 'Error al guardar el paciente.');
            }
        } else {
            return redirect()->back()->with('error', 'El código ya está registrado.');
        }
    }

    public function validateCode($code)
    {
        $isValid = $this->patientModel->validateCode($code);
        return $this->response->setJSON(['data' => $isValid ? [] : ['exists' => true]]);
    }

    public function delete($id)
    {
        // Verificar si el paciente existe
        if (!$this->patientModel->find($id)) {
            return redirect()->to(base_url('patients'))->with('error', 'Paciente no encontrado.');
        }

        if ($this->patientModel->delete($id)) {
            return redirect()->to(base_url('patients'))->with('success', 'Paciente eliminado correctamente.');
        } else {
            return redirect()->to(base_url('patients'))->with('error', 'Error al eliminar el paciente.');
        }
    }

    public function chatbot($id)
    {
        $patient = $this->patientModel->find($id);

        if (!$patient) {
            return redirect()->to(base_url('patients'))->with('error', 'Paciente no encontrado.');
        }

        // Convertir los síntomas a un array y limpiar espacios (CORRECCIÓN IMPORTANTE)
        $symptoms = array_map('trim', explode(',', $patient['symptoms']));
        $symptoms = array_filter($symptoms); // Eliminar elementos vacíos

        // Lógica del árbol de decisión para diagnóstico
        $diagnosis = $this->determineDiagnosis($symptoms);

        // Pasar datos a la vista
        $data = [
            'patient' => $patient,
            'diagnosis' => $diagnosis
        ];

        return view('patients/chatbot', $data);
    }

    private function determineDiagnosis($symptoms)
    {
        // Normalizar los síntomas (minúsculas, sin espacios)
        $normalizedSymptoms = array_map(function ($symptom) {
            return strtolower(trim($symptom));
        }, $symptoms);

        // 1. Primero verificamos condiciones de emergencia (más graves)
        if ($this->hasSymptoms($normalizedSymptoms, ['dificultad_habla', 'debilidad_muscular'])) {
            return "Accidente Cerebrovascular (Emergencia - Busque atención médica inmediata)";
        }

        if ($this->hasSymptoms($normalizedSymptoms, ['rigidez_cuello', 'fiebre_alta'])) {
            return "Meningitis (Emergencia - Busque atención médica inmediata)";
        }

        if ($this->hasSymptoms($normalizedSymptoms, ['dolor_persistente', 'convulsiones', 'perdida_memoria'])) {
            return "Tumor Cerebral (Prioritario - Consulte con especialista)";
        }

        if ($this->hasSymptoms($normalizedSymptoms, ['dolor_cabeza_severa', 'vision_doble'])) {
            return "Hidrocefalia (Prioritario - Consulte con especialista)";
        }

        if ($this->hasSymptoms($normalizedSymptoms, ['presion_ocular', 'vision_doble'])) {
            return "Glaucoma (Urgente - Consulte oftalmólogo)";
        }

        if ($this->hasSymptoms($normalizedSymptoms, ['dolor_cabeza_trauma', 'perdida_conciencia'])) {
            return "Trauma Craneal (Emergencia - Busque atención médica)";
        }

        if ($this->hasSymptoms($normalizedSymptoms, ['nauseas_severas', 'vomitos_proyectiles'])) {
            return "Hipertensión Intracraneal (Emergencia - Busque atención médica)";
        }

        // 2. Luego condiciones serias pero no inmediatamente peligrosas
        if ($this->hasSymptoms($normalizedSymptoms, ['vertigo', 'mareos', 'perdida_equilibrio'])) {
            return "Vértigo Posicional Paroxístico Benigno";
        }

        if ($this->hasSymptoms($normalizedSymptoms, ['dolor_facial', 'hormigueo', 'adormecimiento_cara'])) {
            return "Neuralgia del Trigémino";
        }

        if ($this->hasSymptoms($normalizedSymptoms, ['migraña', 'sensibilidad_luz', 'sensibilidad_sonido'])) {
            return "Migraña";
        }

        if ($this->hasSymptoms($normalizedSymptoms, ['cefalea_tensional', 'presion_cabeza', 'rigidez_cuello'])) {
            return "Cefalea Tensional";
        }

        if ($this->hasSymptoms($normalizedSymptoms, ['dolor_intenso_unilateral', 'lagrimeo_ojo'])) {
            return "Cluster Headache (Cefalea en Racimos)";
        }

        if ($this->hasSymptoms($normalizedSymptoms, ['fiebre_alta', 'letargo'])) {
            return "Encefalitis (Urgente - Consulte médico)";
        }

        if ($this->hasSymptoms($normalizedSymptoms, ['debilidad_facial', 'dificultad_cerrar_ojo'])) {
            return "Parálisis Facial (Consulte médico)";
        }

        if ($this->hasSymptoms($normalizedSymptoms, ['temblores', 'convulsiones', 'aura_visual'])) {
            return "Epilepsia (Consulte neurólogo)";
        }

        if ($this->hasSymptoms($normalizedSymptoms, ['ansiedad_extrema'])) {
            return "Trastorno de Ansiedad";
        }

        // 3. Condiciones menos específicas
        if ($this->hasSymptoms($normalizedSymptoms, ['dolor_cabeza', 'dolor_facial', 'presion_cabeza'])) {
            return "Sinusitis (Consulte médico general)";
        }

        // Si no coincide con ningún patrón claro
        if (!empty($normalizedSymptoms)) {
            $mainSymptom = ucfirst(str_replace('_', ' ', $normalizedSymptoms[0]));
            return "Síntoma principal: $mainSymptom - Se requiere evaluación adicional";
        }

        return "No se reportaron síntomas significativos";
    }

    // Función auxiliar para verificar múltiples síntomas
    private function hasSymptoms($patientSymptoms, $requiredSymptoms)
    {
        $requiredCount = count($requiredSymptoms);
        $foundCount = 0;

        foreach ($requiredSymptoms as $symptom) {
            if (in_array(strtolower(trim($symptom)), $patientSymptoms)) {
                $foundCount++;
            }
        }

        // Requerimos al menos el 80% de los síntomas principales para el diagnóstico
        return ($foundCount / $requiredCount) >= 0.8;
    }
}
